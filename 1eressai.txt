#include "get_next_line.h"

static char	*ft_get_afterline(char *str)
{
	int		i;
	int		j;
	char	*substr;

	j = 0;
	while (str[j] != '\n')
		j++;
	j++;
	i = 0;
	while (str[i + j])
		i++;
	substr = (char *)malloc((i + 1) * sizeof(char));
	if (!substr)
		return (NULL);
	substr[i] = '\0';
	while (--i >= 0)
		substr[i] = str[i + j];
	return (substr);
}

static char	*ft_get_beforeline(char *str)
{
	int		i;
	char	*substr;

	i = 0;
	while (str[i] != '\n')
		i++;
	i++;
	substr = (char *)malloc((i + 1) * sizeof(char));
	if (!substr)
		return (NULL);
	substr[i] = '\0';
	while (--i >= 0)
		substr[i] = str[i];
	return (substr);
}

static long int	ft_read_and_protect(int fd, char *buffer_str, long int size)
{
	long int readchars_nb;

	readchars_nb = read(fd, buffer_str, size);
	if (readchars_nb < 1)
		buffer_str[0] = '\0';
	buffer_str[readchars_nb] = '\0';
	return (readchars_nb);
}

char	*get_next_line(int fd)
{
	char		*buffer_str;
	char		*line;
	static char	*temp;
	int			readchars;

	readchars = 0;
	if (fd < 0 || BUFFER_SIZE <= 0  || read(fd, 0, 0) < 0)
		return (NULL);



	// ici, on veut remettre notre reste (temp) d'un ancien call ds line
	if (temp != NULL && *temp != '\0')
	{
		line = ft_strjoin(temp, "");
		free(temp);
	}
	else
		line = ft_strjoin("", "");
	// ---------------------------------------------------------------------



	// ici, tant que line n'a pas \n, on lui ajoute les nouvelles lectures
	while (!ft_strchr(line, '\n'))
	{
		buffer_str = (char *)malloc((BUFFER_SIZE + 1) * sizeof(char));
		readchars = ft_read_and_protect(fd, buffer_str, BUFFER_SIZE);
		temp = ft_strjoin(line, buffer_str);
		free(line);
		// si dans ce while on ne peut plus lire BUFFER_SIZE, 
		if (readchars != BUFFER_SIZE)
		{
			if (!ft_strchr(temp, '\n'))
			{
				line = ft_strjoin(temp, "\n");
				free(temp);
			}
			else
			{
				line = ft_get_beforeline(temp);
				free(temp);
				temp = ft_get_afterline(temp);
			}
			free(buffer_str);
			return (line);
		}
		free(buffer_str);
		line = ft_strjoin(temp, "");
		free(temp);
	}
	temp = ft_get_afterline(line);
	return (ft_get_beforeline(line));
}